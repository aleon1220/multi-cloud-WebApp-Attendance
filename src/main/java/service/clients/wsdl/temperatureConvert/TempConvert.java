package service.clients.wsdl.temperatureConvert;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import jakarta.xml.ws.WebEndpoint;
import jakarta.xml.ws.WebServiceClient;
import jakarta.xml.ws.WebServiceFeature;
import jakarta.xml.ws.Service;

/**
 * This class was generated by Apache CXF 4.0.3
 * 2023-10-28T21:23:45.149+13:00
 * Generated source version: 4.0.3
 *
 */
@WebServiceClient(name = "TempConvert",
                  wsdlLocation = "file:/home/ws/code/gitHub/multi-cloud-WebApp-Attendance/src/main/resources/wsdl/NumberConversion.wsdl",
                  targetNamespace = "https://www.w3schools.com/xml/")
public class TempConvert extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("https://www.w3schools.com/xml/", "TempConvert");
    public final static QName TempConvertSoap = new QName("https://www.w3schools.com/xml/", "TempConvertSoap");
    public final static QName TempConvertSoap12 = new QName("https://www.w3schools.com/xml/", "TempConvertSoap12");
    public final static QName TempConvertHttpPost = new QName("https://www.w3schools.com/xml/", "TempConvertHttpPost");
    static {
        URL url = null;
        try {
            url = new URL("file:/home/ws/code/gitHub/multi-cloud-WebApp-Attendance/src/main/resources/wsdl/NumberConversion.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(TempConvert.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "file:/home/ws/code/gitHub/multi-cloud-WebApp-Attendance/src/main/resources/wsdl/NumberConversion.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public TempConvert(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public TempConvert(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public TempConvert() {
        super(WSDL_LOCATION, SERVICE);
    }

    public TempConvert(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public TempConvert(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public TempConvert(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *     returns TempConvertSoap
     */
    @WebEndpoint(name = "TempConvertSoap")
    public TempConvertSoap getTempConvertSoap() {
        return super.getPort(TempConvertSoap, TempConvertSoap.class);
    }

    /**
     *
     * @param features
     *     A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TempConvertSoap
     */
    @WebEndpoint(name = "TempConvertSoap")
    public TempConvertSoap getTempConvertSoap(WebServiceFeature... features) {
        return super.getPort(TempConvertSoap, TempConvertSoap.class, features);
    }


    /**
     *
     * @return
     *     returns TempConvertSoap
     */
    @WebEndpoint(name = "TempConvertSoap12")
    public TempConvertSoap getTempConvertSoap12() {
        return super.getPort(TempConvertSoap12, TempConvertSoap.class);
    }

    /**
     *
     * @param features
     *     A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TempConvertSoap
     */
    @WebEndpoint(name = "TempConvertSoap12")
    public TempConvertSoap getTempConvertSoap12(WebServiceFeature... features) {
        return super.getPort(TempConvertSoap12, TempConvertSoap.class, features);
    }


    /**
     *
     * @return
     *     returns TempConvertHttpPost
     */
    @WebEndpoint(name = "TempConvertHttpPost")
    public TempConvertHttpPost getTempConvertHttpPost() {
        return super.getPort(TempConvertHttpPost, TempConvertHttpPost.class);
    }

    /**
     *
     * @param features
     *     A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TempConvertHttpPost
     */
    @WebEndpoint(name = "TempConvertHttpPost")
    public TempConvertHttpPost getTempConvertHttpPost(WebServiceFeature... features) {
        return super.getPort(TempConvertHttpPost, TempConvertHttpPost.class, features);
    }

}
